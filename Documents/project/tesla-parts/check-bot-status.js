#!/usr/bin/env node
// === BOT STATUS CHECKER ===
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞

const https = require('https');

const BOT_URL = process.env.TELEGRAM_WEBHOOK_URL?.replace('/api/telegram/webhook', '') ||
                'https://your-app-name.onrender.com';

console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Tesla Parts Bot...');
console.log(`üìç URL: ${BOT_URL}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
function checkHealth() {
  return new Promise((resolve, reject) => {
    const url = new URL(BOT_URL);
    const options = {
      hostname: url.hostname,
      port: url.port || 443,
      path: '/',
      method: 'GET',
      timeout: 10000
    };

    const req = https.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve({
            status: res.statusCode,
            response: response
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            response: data
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    req.end();
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
function checkDetailedHealth() {
  return new Promise((resolve, reject) => {
    const url = new URL(BOT_URL);
    const options = {
      hostname: url.hostname,
      port: url.port || 443,
      path: '/health',
      method: 'GET',
      timeout: 10000
    };

    const req = https.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve({
            status: res.statusCode,
            response: response
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            response: data
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function main() {
  try {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint...');
    const healthResult = await checkHealth();

    if (healthResult.status === 200) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç');
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${healthResult.response.status}`);
      console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${healthResult.response.environment}`);
      console.log(`üîó Webhook URL: ${healthResult.response.webhook_url}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${healthResult.status}`);
      return;
    }

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ health check...');
    const detailedResult = await checkDetailedHealth();

    if (detailedResult.status === 200) {
      console.log('‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞');
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.round(detailedResult.response.uptime)} —Å–µ–∫`);
      console.log(`üíæ –ü–∞–º—è—Ç—å: ${Math.round(detailedResult.response.memory.heapUsed / 1024 / 1024)} MB`);
      console.log(`üè∑Ô∏è  –í–µ—Ä—Å–∏—è: ${detailedResult.response.version}`);
    } else {
      console.log(`‚ö†Ô∏è  –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${detailedResult.status}`);
    }

    console.log('\nüéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');

  } catch (error) {
    console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:');
    console.log(error.message);

    if (error.code === 'ENOTFOUND') {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –°–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç');
      console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–π URL');
      console.log('   - –°–µ—Ä–≤–∏—Å —Å–ø–∏—Ç (free tier Render)');
    } else if (error.message === 'Request timeout') {
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –°–µ—Ä–≤–∏—Å —Å–ø–∏—Ç (free tier Render)');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
main().catch(console.error);